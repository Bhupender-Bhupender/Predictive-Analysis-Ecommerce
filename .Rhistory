knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
df <- read.csv("FE_reviews.csv", stringsAsFactors = FALSE)
df %>%
group_by(recommended_ind) %>%
summarise(
mean_rating = mean(rating, na.rm=TRUE),
sd_rating = sd(rating, na.rm=TRUE),
n = n()
)
# t-test
t_test_result <- t.test(rating ~ recommended_ind, data = df)
df <- read.csv("FE_reviews.csv", stringsAsFactors = FALSE)
df %>%
group_by(recommended_ind) %>%
summarise(
mean_rating = mean(rating, na.rm=TRUE),
sd_rating = sd(rating, na.rm=TRUE),
n = n()
)
df <- read.csv("FE_reviews.csv", stringsAsFactors = FALSE)
df <- read.csv("Data/FE_reviews.csv", stringsAsFactors = FALSE)
df <- read.csv("Data/FE_reviews.csv", stringsAsFactors = FALSE)
df %>%
group_by(recommended_ind) %>%
summarise(
mean_rating = mean(rating, na.rm=TRUE),
sd_rating = sd(rating, na.rm=TRUE),
n = n()
)
# t-test
t_test_result <- t.test(rating ~ recommended_ind, data = df)
print(t_test_result)
# Nếu dữ liệu không chuẩn (kiểm định Shapiro)
shapiro.test(df$rating[df$recommended_ind == 0])
shapiro.test(df$rating[df$recommended_ind == 1])
df <- read.csv("Data/FE_reviews.csv", stringsAsFactors = FALSE)
df %>%
group_by(recommended_ind) %>%
summarise(
mean_rating = mean(rating, na.rm=TRUE),
sd_rating = sd(rating, na.rm=TRUE),
n = n()
)
# t-test
t_test_result <- t.test(rating ~ recommended_ind, data = df)
print(t_test_result)
# Nếu dữ liệu không chuẩn (kiểm định Shapiro)
shapiro.test(df$rating[df$recommended_ind == 0])
shapiro.test(df$rating[df$recommended_ind == 1])
print(t_test_result)
# t-test
t_test_result <- t.test(rating ~ recommended_ind, data = df)
print(t_test_result)
library(gganimate)
install.packages("gganimate")
#install.packages("gganimate")
library(gganimate)
#install.packages("gganimate")
library(gganimate)
p <- ggplot(df, aes(x = rating, fill = factor(recommended_ind))) +
geom_histogram(binwidth = 1, alpha = 0.7, position = 'identity') +
labs(title = 'Distribution of Ratings by Recommendation', fill = 'Recommended') +
transition_states(recommended_ind, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out')
animate(p, nframes = 50, fps = 10)
animate(p, nframes = 50, fps = 10)
anim_save("rating_distribution.gif")
p <- ggplot(df, aes(x = rating, fill = factor(recommended_ind))) +
geom_histogram(binwidth = 1, alpha = 0.7, position = 'identity') +
labs(title = 'Distribution of Ratings by Recommendation', fill = 'Recommended') +
transition_states(recommended_ind, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out')
animate(p, nframes = 50, fps = 10)
fig
library(plotly)
install.packages("plotly")
install.packages("plotly")
library(plotly)
install.packages("plotly")
library(plotly)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
#install.packages("plotly")
library(plotly)
fig <- plot_ly(df, x = ~age, y = ~rating, color = ~factor(recommended_ind),
colors = c('red', 'green'),
type = 'scatter', mode = 'markers',
marker = list(size = 10, opacity = 0.7)) %>%
layout(title = 'Age vs Rating by Recommendation',
xaxis = list(title = 'Age'),
yaxis = list(title = 'Rating'))
fig
install.packages("pheatmap")
library(pheatmap)
#install.packages("pheatmap")
library(pheatmap)
numeric_data <- df %>% select_if(is.numeric)
cor_mat <- cor(numeric_data, use = "pairwise.complete.obs")
pheatmap(cor_mat,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
clustering_method = "complete",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50),
main = "Correlation Heatmap with Clustering")
library(GGally)
install.packages("GGally")
library(GGally)
#install.packages("GGally")
library(GGally)
ggpairs(df, columns = c("age", "rating", "positive_feedback_count", "review_length"),
aes(color = factor(recommended_ind), alpha = 0.5)) +
theme_minimal()
#install.packages("GGally")
library(GGally)
ggpairs(df, columns = c("age", "rating", "positive_feedback_count", "review_length"),
aes(color = factor(recommended_ind), alpha = 0.5)) +
theme_minimal()
library(plotly)
plot_ly(type = 'parcoords',
line = list(color = as.numeric(df$recommended_ind),
colorscale = 'Viridis'),
dimensions = list(
list(label = 'Age', values = df$age),
list(label = 'Rating', values = df$rating),
list(label = 'Feedback Count', values = df$positive_feedback_count),
list(label = 'Review Length', values = df$review_length)
))
library(ggridges)
install.packages("ggridges")
#install.packages("ggridges")
library(ggridges)
#install.packages("ggridges")
library(ggridges)
ggplot(df, aes(x = rating, y = factor(recommended_ind), fill = factor(recommended_ind))) +
geom_density_ridges(alpha = 0.7) +
labs(title = "Ridgeline Plot: Rating Distribution by Recommendation",
x = "Rating", y = "Recommended Ind") +
theme_ridges()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
#install.packages("plotly")
library(plotly)
df <- read.csv("Data/FE_reviews.csv", stringsAsFactors = FALSE)
df %>%
group_by(recommended_ind) %>%
summarise(
mean_rating = mean(rating, na.rm=TRUE),
sd_rating = sd(rating, na.rm=TRUE),
n = n()
)
# t-test
t_test_result <- t.test(rating ~ recommended_ind, data = df)
print(t_test_result)
fig <- plot_ly(df, x = ~age, y = ~rating, color = ~factor(recommended_ind),
colors = c('red', 'green'),
type = 'scatter', mode = 'markers',
marker = list(size = 10, opacity = 0.7)) %>%
layout(title = 'Age vs Rating by Recommendation',
xaxis = list(title = 'Age'),
yaxis = list(title = 'Rating'))
fig
#install.packages("pheatmap")
library(pheatmap)
numeric_data <- df %>% select_if(is.numeric)
cor_mat <- cor(numeric_data, use = "pairwise.complete.obs")
pheatmap(cor_mat,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
clustering_method = "complete",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50),
main = "Correlation Heatmap with Clustering")
#install.packages("GGally")
library(GGally)
ggpairs(df, columns = c("age", "rating", "positive_feedback_count", "review_length"),
aes(color = factor(recommended_ind), alpha = 0.5)) +
theme_minimal()
#install.packages("ggridges")
library(ggridges)
ggplot(df, aes(x = rating, y = factor(recommended_ind), fill = factor(recommended_ind))) +
geom_density_ridges(alpha = 0.7) +
labs(title = "Ridgeline Plot: Rating Distribution by Recommendation",
x = "Rating", y = "Recommended Ind") +
theme_ridges()
ggplot(df, aes(x = review_length, y = rating)) +
geom_point(alpha = 0.3) +
labs(title = "Rating vs Review Length", x = "Review Length", y = "Rating") +
theme_minimal()
ggplot(df, aes(x = review_length)) +
geom_histogram(binwidth = 10, fill = "purple", color = "black") +
labs(title = "Distribution of Review Length", x = "Review Length (words/characters)", y = "Frequency") +
theme_minimal()
ggplot(df, aes(x = class_name_Intimates)) +
geom_bar(fill = "orange") +
labs(title = "Count by Class Name Intimates", x = "Class Name Intimates", y = "Count") +
theme_minimal()
ggplot(df, aes(x = department_name_Dresses, y = rating)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Rating Distribution by Dresses Department", x = "Department Dresses", y = "Rating") +
theme_minimal()
